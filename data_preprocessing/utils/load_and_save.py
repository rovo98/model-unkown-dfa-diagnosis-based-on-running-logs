# utils functions for saving and loading sparse matrix
# author rovo98
# since 2019.12.24

from scipy.sparse import csr_matrix
import numpy as np
import pickle


def save_sparse_csr(filename, array):
    """compressed and save the given np.array (csr sparse matrix) into a npz file.

    :type filename: str
    :type array: np.array
    :rtype None

    :param filename: the name of the file to save data.
    :param array : csr (compressed sparse row) matrix
    :return: nothing.
    """
    np.savez_compressed(filename, data=array.data, indices=array.indices,
                        indptr=array.indptr, shape=array.shape)


def load_sparse_csr(filename):
    """Load csr matrix from the given npz file (generated by using save_sparse_csr() method before)

    :type filename: str
    :rtype csr_matrix

    :param filename: the name of the npz file to load data.
    :return: loaded csr_matrix object.
    """
    loader = np.load(filename)
    return csr_matrix((loader['data'], loader['indices'],
                       loader['indptr']), shape=loader['shape'])


def save_object(filename, obj):
    """write the given obj into file using pickle.

    :type filename: str
    :type obj: any

    :param filename: name of the file to be written
    :param obj: the object to be written
    :return: Nothing.
    """
    with open(filename, 'wb') as output:
        pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)


def load_object(filename):
    """load obj from file using pickle.

    :type filename: str

    :param filename: name of the file to loaded

    :return: one object contained in the specified file.
    """
    with open(filename, 'rb') as f_input:
        return pickle.load(f_input)
